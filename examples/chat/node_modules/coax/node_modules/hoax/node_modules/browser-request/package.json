{
  "name": "browser-request",
  "version": "0.2.0",
  "author": {
    "name": "Jason Smith",
    "email": "jhs@iriscouch.com"
  },
  "description": "Browser port of the Node.js 'request' package",
  "keywords": [
    "request",
    "http",
    "browser",
    "ender",
    "browserify"
  ],
  "homepage": "http://github.com/iriscouch/browser-request",
  "repository": {
    "type": "git",
    "url": "git://github.com/iriscouch/browser-request"
  },
  "dependencies": {},
  "devDependencies": {
    "tap": "0.1.3",
    "ender": "~0.8.2",
    "static-plus": "~0.2.4",
    "uglify-js": "~1.2.5",
    "browserify": "~1.10.6"
  },
  "engines": [
    "node"
  ],
  "ender": "./dist/ender/ender.js",
  "browserify": "./dist/ender/request.js",
  "readme": "# Browser Request: The easiest HTTP library you'll ever see\n\nBrowser Request is a port of Mikeal Rogers's ubiquitous and excellent [request][req] package to the browser.\n\nJealous of Node.js? Pining for clever callbacks? Request is for you.\n\nDon't care about Node.js? Looking for less tedium and a no-nonsense API? Request is for you too.\n\n# Examples\n\nFetch a resource:\n\n```javascript\nrequest('/some/resource.txt', function(er, response, body) {\n  if(er)\n    throw er;\n  console.log(\"I got: \" + body);\n})\n```\n\nSend a resource:\n\n```javascript\nrequest.put({uri:'/some/resource.xml', body:'<foo><bar/></foo>'}, function(er, response) {\n  if(er)\n    throw new Error(\"XML PUT failed (\" + er + \"): HTTP status was \" + response.status);\n  console.log(\"Stored the XML\");\n})\n```\n\nTo work with JSON, set `options.json` to `true`. Request will set the `Content-Type` and `Accept` headers, and handle parsing and serialization.\n\n```javascript\nrequest({method:'POST', url:'/db', body:'{\"relaxed\":true}', json:true}, on_response)\n\nfunction on_response(er, response, body) {\n  if(er)\n    throw er\n  if(result.ok)\n    console.log('Server ok, id = ' + result.id)\n}\n```\n\nOr, use this shorthand version (pass data into the `json` option directly):\n\n```javascript\nrequest({method:'POST', url:'/db', json:{relaxed:true}}, on_response)\n```\n\n## Convenient CouchDB\n\nBrowser Request provides a CouchDB wrapper. It is the same as the JSON wrapper, however it will indicate an error if the HTTP query was fine, but there was a problem at the database level. The most common example is `409 Conflict`.\n\n```javascript\nrequest.couch({method:'PUT', url:'/db/existing_doc', body:{\"will_conflict\":\"you bet!\"}}, function(er, resp, result) {\n  if(er.error === 'conflict')\n    return console.error(\"Couch said no: \" + er.reason); // Output: Couch said no: Document update conflict.\n\n  if(er)\n    throw er;\n\n  console.log(\"Existing doc stored. This must have been the first run.\");\n})\n```\n\nSee the [Node.js Request README][req] for several more examples. Request intends to maintain feature parity with Node request (except what the browser disallows). If you find a discrepancy, please submit a bug report. Thanks!\n\n# Usage\n\n## Browserify\n\nBrowser Request is a [browserify][browserify]-enabled package.\n\nFirst, add `browser-request` to your Node project\n\n    $ npm install browser-request\n\nNext, make a module that uses the package.\n\n```javascript\n// example.js - Example front-end (client-side) code using browser-request via browserify\n//\nvar request = require('browser-request')\nrequest('/', function(er, res) {\n  if(!er)\n    return console.log('browser-request got your root path:\\n' + res.body)\n\n  console.log('There was an error, but at least browser-request loaded and ran!')\n  throw er\n})\n```\n\nTo build this for the browser, run it throubh browserify.\n\n    $ browserify --entry example.js --outfile example-built.js\n\nDeploy `example-built.js` to your web site and use it from your page.\n\n```html\n  <script src=\"example-built.js\"></script> <!-- Runs the request, outputs the result to the console -->\n```\n\n## Ender\n\nBrowser Request is an [Ender][ender] package. If you don't have Ender, install it, and don't ever look back.\n\n    $ ender add browser-request\n\n## RequireJS\n\nBrowser Request also supports [RequireJS][rjs]. Add `dist/requirejs/request.js` and `dist/requirejs/xmlhttprequest.js` to your web application and use it from your code.\n\n```javascript\nrequire(['request'], function(request) {\n  // request is ready.\n})\n```\n\n## Traditional\n\nThe traditional way is to use it like any other Javascript library. Add `dist/browser/request.js` to your web application and use it from your page.\n\n```html\n<script src=\"request.js\"></script>\n<script>\n    request(\"/motd.html\", function(er, res) {\n        if(er)\n            return console.error('Failed to get the message of the day')\n        console.log('Got the message of the day')\n    })\n</script>\n```\n\n## License\n\nBrowser Request is licensed under the Apache 2.0 license.\n\nBrowser Request uses Sergey Ilinsky's [XMLHttpRequest][xhr] package, licended under the terms of the LGPL 2.1 or later.\n\n[req]: https://github.com/mikeal/request\n[rjs]: http://requirejs.org/\n[xhr]: https://github.com/ilinsky/xmlhttprequest\n[ender]: http://ender.no.de\n",
  "readmeFilename": "README.md",
  "_id": "browser-request@0.2.0",
  "_from": "browser-request@0.2"
}
